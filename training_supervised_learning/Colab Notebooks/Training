{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"MTkEkZhB7-cH"},"outputs":[],"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import math\n","from torch.utils.data import Dataset\n","import pickle\n","import datetime\n","import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1715782220409,"user":{"displayName":"Moncef Djafri","userId":"09780211288987995701"},"user_tz":-120},"id":"jiHrdSf07-cJ","outputId":"3963cf85-9903-468e-f126-ce5946f1c93c"},"outputs":[{"output_type":"stream","name":"stdout","text":["cpu\n"]}],"source":["if(torch.cuda.is_available()):\n","    dev = torch.device(\"cuda\")\n","else:\n","    dev = torch.device(\"cpu\")\n","print(dev)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PyQT0IMOA__I"},"outputs":[],"source":["\n","def train_model(net, trainset, dev, save_file,saves = 1000, prints = 200,lr = 0.001,iter = 50, batch_size = 32, num_workers = 0):\n","  optimizer = optim.Adam(net.parameters(), lr=lr)\n","  criterion = nn.CrossEntropyLoss().to(dev)\n","  for epoch in range(iter):  # loop over the dataset multiple times\n","      running_loss = 0.0\n","      trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n","                                            shuffle=True, num_workers=num_workers)\n","      for i, train_data in enumerate(trainloader, 0):\n","        try:\n","          inputs, labels = train_data\n","          inputs = inputs.float().to(dev)\n","          labels = labels.to(dev)\n","          optimizer.zero_grad()\n","          outputs = net(inputs)\n","          loss = criterion(outputs, labels)\n","          loss.backward()\n","          optimizer.step()\n","\n","          running_loss += loss.item()\n","          if i % prints == prints-1:    # print every 2000 mini-batches\n","              print('[%d, %5d] loss: %.3f' %\n","                    (epoch + 1, i + 1, running_loss / 200))\n","              running_loss = 0.0\n","          if i % saves == saves-1:    # print every 2000 mini-batches\n","                torch.save({\n","              'epoch': epoch,\n","              'model_state_dict': net.state_dict(),\n","              'optimizer_state_dict': optimizer.state_dict(),\n","              'loss': loss,\n","              }, save_file)\n","        except Exception as e:\n","          print(e)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RdpA6Ebm7-cO"},"outputs":[],"source":["def test_model(net,trainset, dev, iters = 1000,batch_size = 32, num_workers = 0):\n","  correct = 0\n","  total = 0\n","  trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n","                                            shuffle=True, num_workers=0)\n","  with torch.no_grad():\n","      for i in range(1000):\n","          data_training = next(iter(trainloader))\n","          images, labels = data_training\n","          images = images.float().to(dev)\n","          labels = labels.to(dev)\n","          outputs = net(images)\n","          predicted = torch.argmax(torch.softmax(outputs.data, 1),axis =1)\n","          total += labels.size(0)\n","          correct += (predicted == labels).sum().item()\n","\n","  print('Accuracy of the network : %d %%' % (\n","      100 * correct / total))\n"]}],"metadata":{"colab":{"machine_shape":"hm","provenance":[{"file_id":"1a6ZXyviUEmXDLu7bjAoLyMWY4jNVZZUk","timestamp":1714092124397}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.8"}},"nbformat":4,"nbformat_minor":0}