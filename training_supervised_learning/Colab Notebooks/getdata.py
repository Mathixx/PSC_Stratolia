# -*- coding: utf-8 -*-
"""GetData

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oduuSjRbbdGftjW6PR6qug_Ad-D9t6np
"""

import numpy as np
import math
from torch.utils.data import Dataset
import pickle
import datetime
import pandas as pd
import os
import csv
import torch

from google.colab import drive
drive.mount('/content/drive')

def grid_time(t):
    t = t
    t = t/3600
    t = t + 1 + 2
    t = t - t%6
    t = t - 1
    return (t+1)/6

def grid_lat(l):
    l = l*2
    l = round(l)
    l = l+2
    l = l - l%5
    l = l/2
    l = l +90
    l = l*2

    return (l/5)%73

def grid_long(l):
    l = l*2
    l = round(l)
    l = l+2
    l = l - l%5

    return (l/5)%144
def int_array(arr):
    return [int(i) for i in arr]

def grid_array(arr):
    return int_array([grid_long(arr[0]),grid_lat(arr[1]),grid_long(arr[2]),grid_lat(arr[3]),grid_time(arr[4]),int(arr[5])])


def input_label(training_data,dtime,i,data,dir_number = 8):
    array = grid_array(training_data[i])
    time = array[4]
    long_start = array[0]
    lat_start = array[1]
    long_end = array[2]
    lat_end = array[3]
    alt = array[5]
    winds = data[time:time+dtime,:,:,:]
    winds = np.transpose(winds,(0,4,1,2,3))
    winds = np.arctan2(winds[:,0:1,:,:,:],winds[:,1:2,:,:,:])/(3.1415/2)
    pos = np.zeros((dtime,1,winds.shape[2],winds.shape[3],winds.shape[4]))
    for i in range(pos.shape[2]):
        pos[0,0,i,long_end,lat_end] = -1
        pos[0,0,i,long_start,lat_start] = 1
    input = np.concatenate((winds,pos),axis=1)
    action = np.arctan2(data[time,alt,long_start,lat_start,1],data[time,alt,long_start,lat_start,0])
    action = int(np.round(((action+np.pi)*360/(2*np.pi))/(360/dir_number))%dir_number)

    return (input,action)

class CustomDataset(Dataset):
    def __init__(self, entries, dtime, data, transform=None, target_transform=None):
        self.entries = entries
        self.transform = transform
        self.target_transform = target_transform
        self.dtime = dtime
        self.data = data


    def __len__(self):
        return len(self.entries)

    def __getitem__(self, idx):
        inp,lab = input_label(self.entries,self.dtime,idx,self.data)
        inp = np.pad(inp,((0,0),(0,0),(0,0),(2,2),(0,0)),'wrap')
        return inp, lab

def get_data(training_data_file = "/content/drive/MyDrive/DataBase", wind_data_file = "/content/drive/MyDrive/Data_Winds/objet_wind_data_2021.pickle"):
  database_folder = training_data_file
  f = os.listdir(database_folder)
  training_data = []

  for s in f:
    with open('/content/drive/MyDrive/DataBase/'+s, newline='') as csvfile:
      spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
      for row in spamreader:
          training_data.append([float(item) for item in row])
    print(len(training_data))


  with open(wind_data_file, "rb") as f:
      wind_data = pickle.load(f)
      data = wind_data['data']

  trainset = CustomDataset(training_data,1,data)
  #trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
  #                                         shuffle=True, num_workers=num_workers)
  return trainset

